1、查看工作区状态命令：git status
2、将工作区文件提交至暂存区：git add <file>
3、将暂存区文件回退到工作区：git rm --cache <file> 或 git reset HEAD <file>
   其中git rm --cached <file> 还可以实现：将文件从暂存区删除但仍保留在工作区
4、将暂存区所有文件提价到版本库：git commit -m '<comment message>'
5、查看提交历史：git log
6、对于committer来说，user.name和user.email有2个地方可以设置：
		(1)、~/.gitconfig(如果电脑里的项目没有设置gitconfig信息，则所有项目都使用这个配置信息，~表示当前用户目录)，配置命令：git config --global user.name 'xxx' user.email 'xxx@xxx.xxx'
		(2)、针对于特定项目的，在特定项目的 .git/config文件中配置，配置命令：git config --local user.name 'xxx' user.email 'xxx@xxx.xxx'
7、删除某一项git配置：git config --unset <key>
8、vim命令打开文件后直接定位到第几行命令：:<linenumber>
9、将对版本库或者暂存区文件所进行的修改内容丢弃掉：git checkout -- <file> (文件回到原来所在的区，即版本库或者暂存区)
10、完全修改文件内容：echo xxx > <file> (将echo后面的输出内容重定向到文件当中)，还可用于快速新建文件
11、快速移动到一行命令的开头：ctrl + A
12、将已提交至版本库的文件删除：git rm <file>，此时文件在暂存区，并没有提交使其真正删除，如果想要真正删除文件，
		执行命令：git commit -m '<commit message>'
13、将误删除的文件恢复：
		(1)、git reset HEAD <file>	(此时工作区目录还没有该文件)
		(2)、git checkout -- <file>	(此时工作区目录存在了该文件)
14、把工作区所有文件纳入到暂存区：git add .
15、vim命令：空格(翻页)，ctrl + F(向下翻页)，ctrl + B(往回翻页)
16、查看最近N条的提交log：git log -<num>
17、以简单一行的形式查看log：git log --pretty=oneline
18、依次执行多个命令用&&连接
19、回到上次进入的目录：cd -
20、列出分支：git branch
21、创建分支：git branch <branch>
22、创建新分支并同时切换到这个分支：git checkout -b <branch>
23、删除分支(要在其他分支上删除所要删除的分支，若所要删除的分支上有没有合并的修改内容，会提示错误信息，不能删除		)：git branch -d <branch>
24、无论所要删除的分支上是否含有没有合并的信息都要删除该分支：git branch -D <branch>
25、显示当前分支最近的一条提交信息：git branch -v
26、将分支修改的内容合并到当前分支：git merge <branch>
27、HEAD指向当前分支，master或者其他分支指向提交
28、将已跟踪过的(tracked)即提交过版本库又进行修改的工作区文件纳入到暂存区并提交到版本库：git commit -am '<commit message>'
29、以图形化形式显示简化版提交信息：git log --graph --abbrev-commit
30、回退到上一版本：git reset --hard HEAD^
31、回退到上n版本：git reset --hard HEAD~n
32、回退到某一版本：git reset --hard commit_id
33、查看git的操作历史：git reflog
34、以历史的某一个版本为起始点创建分支(游离态：detached HEAD state)：git checkout <commit_id>
	(1)、此时未做修改可以直接切换到其他分支
	(2)、若做了修改，则切换到其他分支时会提示错误信息：
			error: Your local changes to the following files would be overwritten by checkout:
					<some file>
			Please, commit your changes or stash(储存) them before you can switch branches.
		需要将修改提交，产生一个新的commit id，然后创建分支：git branch <new-branch-name> <new-commit-id>
35、如果在一个分支上进行修改且未提交，此时要切换到另一个分支，而另一个分支有了新的提交，是切不过去的(因为会导致		当前分支的修改丢失)，若想成功切换，需要将当前分支的修改状态保存起来：git stash
36、列出保存现场：git stash list
37、恢复现场：git stash pop(恢复的同时将stash内容删除)
			 git stash apply(恢复的同时不删除stash内容，需要通过git stash drop stash@{0}手动删除)
38、查看文件的修改历史：git blame <file_name>
39、比较两个文件差异(Linux)：diff <file1> <file2>，看详细信息：diff -u <file1> <file2>
40、比较工作区和暂存区(文件已纳入到暂存区，且又在工作区进行了修改，源是暂存区，比较目标是工作区)：git diff
41、比较工作区和最新提交(源是最新提交，比较目标是工作区)：git diff HEAD
42、比较工作区和某一提交：git diff commit_id
43、比较暂存区和最新提交：git diff --cached
44、比较暂存区和某一提交：git diff --cached commit_id
45、将本地git项目推送到远程GitHub：
	(1)、git remote add origin(远程仓库链接的代号或者别名) <github repository link>
	(2)、git push -u(将本地master分支与远程仓库做关联，以后推送直接使用git push即可) origin master
46、列出与当前本地git仓库相关联的远程git仓库：git remote show
47、显示与当前本地git仓库相关联的远程github仓库详细信息：git remote show origin(ssh方式会在~目录下生成.ssh目录及此目录下的known_hosts文件)
48、基于Git分支的开发模型：
	(1)、develop分支(频繁变化的一个分支)
	(2)、test分支(供测试与产品等人员使用的一个分支，变化不是特别频繁)
	(3)、master分支(生产发布分支，变化非常不频繁的一个分支)
	(4)、bugfix(hotfix)分支(生产系统当中出现了紧急Bug，用于紧急修复的分支)
49、https推送方式需要用户名和密码，ssh方式不需要，但需要在本地生成公钥和私钥，将公钥放在远程GitHub，每次push的时候会携带私钥与公钥进行配对，这样就不需要每次都输入用户名和密码了。
50、远程GitHub的ssh信息存放在~/.ssh/known_hosts文件中
51、生成本地ssh公钥和私钥命令：ssh-keygen，生成的公钥和私钥文件也会存放在~/.ssh目录中
52、本地没有tracking information即没有向远程GitHub仓库推送过信息不能直接使用git pull命令需要使用
git pull <origin> <branch> 来使远程与本地分支产生关联
53、origin/master是记录远程分支信息的一个本地分支，当本地有修改并提交的时候使用git status命令会查看到本地与远程分支内容的不同。当本地执行git push时，origin/master分支指针会指向本地master分支
54、查看本地所有分支：git branch -a
55、查看本地所有分支并显示各个分支最后的提交信息：git branch -av
56、将远程项目克隆到本地：git clone <ssh_link> <project name in local>
57、vim删除多行：(命令模式下):<要删除内容的起始行号>,<要删除内容的末尾行号>d，然后回车
58、如果git pull产生conflict，origin/master分支仍然会fast forward，解决完git pull产生的conflict之后(git add  git commit)，本地版本库会领先origin/master两个版本，一个是之前修改后commit的版本，一个是解决完冲突commit的版本
59、git pull = git fetch + git merge
60、git起别名(将别名适用于所有仓库)：git config --global alias.<别名名称> <git命令或参数>
    例：git config --global alias.br branch
        git br == git branch
    git会将设置写入到~/.gitconfig文件中
61、给外部命令起别名：git config --global alias.<别名名称> '!<外部命令名称>'
    例：git config --global alias.ui '!gitk'
62、upstream branch是与本地分支相对应的远程分支
63、将本地分支推送到远程：git push --set-upstream origin <branch_name> 或 git push origin <branch_name>
    附：当本地分支名与远程不同：git push --set-upstream origin <local_branch_name>:<remote_branch_name> 或 
    git push origin HEAD:<remote_branch_name> 或 git push origin <local_branch_name>:<remote_branch_name>
64、很多时候远程非master分支与本地master分支不是处在一个提交点，这时在本地新建分    支时需要追加远程分支(本地新建分支会自动指向master分支所指向的提交点)：
    git checkout -b develop origin/develop
    或：
    git checkout --track origin/develop(名字默认与远程相同)
65、git push的完整写法：git push origin <本地分支名>:<远程分支名>
66、删除远程develop分支：
    (1)、第一种方式：git push origin :develop
    (2)、第二种方式：git push origin --delete develop
67、git pull完整命令：git pull origin <remote_branch_name>:<local_branch_name>
68、HEAD标记：HEAD文件是一个指向当前所在分支的引用标识符，该文件内部并不包含SHA-    1值，而是一个指向另外一个引用的指针
69、对于HEAD修改的任何操作，都会被git reflog完整记录下来
70、打标签命令：git tag <tag_name>
71、打带有注释的标签：git tag -a <tag_name> -m '<comment message>'
72、列出标签：git tag
73、显示某一标签信息：git show<tag_name>
74、搜索标签：git tag -l '<search info>'
75、将未推送到远程的tag信息推送到远程：
    git push origin <tag_name1> <tag_name2> ...
    或
    git push origin --tags
76、当远程分支已经被删除时，执行git pull命令会报错，此时应先执行
    git remote prune origin
77、refspec是指一种引用规范，对应的是仓库.git目录下的refs目录
78、对于git的理解：
    (1)、执行完每个git命令之后，整个git仓库(工作区，暂存区，版本库)都会处于一个          新的状态。例如：对于已纳入到版本库的文件在执行完 git rm <file>之后，暂         存区和工作区的文件会被删除，而版本库的文件依然存在，此时有如下两种情况：
        ①、执行git commit 命令，文件会从版本库删除
        ②、执行git reset HEAD <file> 命令，暂存区会恢复到文件被删除之前的状态，            即此时文件又回到了暂存区，而工作区还没有该文件。这也就引出了
           git reset HEAD <file> 命令的本质：回退暂存区里的文件，还原为文件被提            交到版本库时的状态，即让暂存区里文件的状态与版本库一致。
           之后执行git checkout -- <file>，工作区里消失的该文件被恢复，此时git仓           库(工作区，暂存区，版本库)的状态与执行git rm <file> 命令之前一致
    (2)、其实执行完git add <file> 命令之后并不是将文件从工作区移动到暂存区，而是         工作区依然有该文件，同时暂存区也有了该文件，相当于拷贝。
    	 git checkout -- <file> 也是相当于从暂存区将文件复制到了工作区
	 git rm --cached <file> 是仅将文件从暂存区移除，而工作区中文件仍然保留
79、git项目添加子模块：git submodule add <remote url of submodule> <local dir>
80、git父工程拉取所有子模块更新：git submodule foreach git pull
81、git克隆(包含子模块)：git clone <ssh_url> <local project name> --recursive
82、使用subtree命令引入子模块：
    git remote add subtree-origin <submodule_url>
    git subtree add --prefix=<local dir> subtree-origin <submodule branch>
83、subtree与submodule区别：
    (1)、subtree在github父工程的体现形式是一个文件夹里存放子模块文件的拷贝，
    	 而submodule则是存放的子模块的引用，点击会跳转到子模块
84、--squash与subtree并无关系，是subtree命令的可选参数，在父工程merge子模块的时     候使用，会将子模块的修改压缩打包成一个提交merge到父工程，之后在父工程的
    git log里不会体现子模块的修改历史
85、
